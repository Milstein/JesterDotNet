using System;
using System.IO;

namespace JesterDotNet.Model
{
    /// <summary>
    /// Encapsulates the underlying ILDasm program which is responsible for actually
    /// disassembling the PE file.
    /// </summary>
    public class ILDasm
    {
        #region Fields (Private)

        private readonly string _inputFile;
        private Stream _outputIL;
        private bool _outputFileHasBeenGenerated;
        private Preferences _preferences = PreferencesManager.Preferences;

        #endregion Fields (Private)

        #region Constructor (Public)

        /// <summary>
        /// Initializes a new instance of the <see cref="ILDasm"/> class.
        /// </summary>
        /// <param name="source">A stream containing the PE file to disassemble.</param>
        public ILDasm(Stream source)
        {
            // ILDasm can only use files on disk, so we have to write this out to
            // disk first
            _inputFile = Utility.CopyToDisk(source);
        }
        
        #endregion Constructor (Public)

        #region Properties (Public)

        /// <summary>
        /// Gets the output IL file that was generated by the <see cref="Invoke"/> method.
        /// </summary>
        /// <value>The output IL file that was generated by the <see cref="Invoke"/> 
        /// method.</value>
        /// <exception cref="InvalidOperationException">This property has been accessed
        /// before the <see cref="Invoke"/> method has been called.</exception>
        public Stream OutputIL
        {
            get
            {
                if (!(_outputFileHasBeenGenerated))
                    throw new InvalidOperationException(Exceptions.ILDasm);

                if (_outputIL == null)
                {
                    _outputIL =
                        new FileStream(
                        Path.Combine(_preferences.TempPath, _preferences.OutputILFileName),
                        FileMode.Open);
                }
                return _outputIL;
            }
        }

        #endregion

        #region Methods (Public)

        /// <summary>
        /// Invokes the underlying ILDasm on the current PE file stream.
        /// </summary>
        /// <exception cref="ProcessException">Occurs when the underlying process has returned
        /// an error code.</exception>
        public void Invoke()
        {
            string arguments = _inputFile + " " +
                               @"/output=" + _preferences.TempPath +
                               _preferences.OutputILFileName;

            ProcessInvoker invoker = new ProcessInvoker(_preferences.ILDasmPath, arguments);
            int returnCode = invoker.Start();
            _outputFileHasBeenGenerated = true;

            if (returnCode == Constants.UnderlyingProcessException)
                throw new ProcessException(Exceptions.ProcessException);
        }

        #endregion Methods (Public)
    }
}